package com.njit.cookbook.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.njit.cookbook.model.CommentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT_BEAN".
*/
public class CommentBeanDao extends AbstractDao<CommentBean, String> {

    public static final String TABLENAME = "COMMENT_BEAN";

    /**
     * Properties of entity CommentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property Avartar = new Property(1, String.class, "Avartar", false, "AVARTAR");
        public final static Property Nickname = new Property(2, String.class, "Nickname", true, "NICKNAME");
        public final static Property NickName = new Property(3, String.class, "NickName", false, "NICK_NAME");
        public final static Property Content = new Property(4, String.class, "Content", false, "CONTENT");
    }


    public CommentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: ID
                "\"AVARTAR\" TEXT," + // 1: Avartar
                "\"NICKNAME\" TEXT PRIMARY KEY NOT NULL ," + // 2: Nickname
                "\"NICK_NAME\" TEXT," + // 3: NickName
                "\"CONTENT\" TEXT);"); // 4: Content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String Avartar = entity.getAvartar();
        if (Avartar != null) {
            stmt.bindString(2, Avartar);
        }
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(3, Nickname);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(4, NickName);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(5, Content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String Avartar = entity.getAvartar();
        if (Avartar != null) {
            stmt.bindString(2, Avartar);
        }
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(3, Nickname);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(4, NickName);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(5, Content);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public CommentBean readEntity(Cursor cursor, int offset) {
        CommentBean entity = new CommentBean( //
            cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Avartar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentBean entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setAvartar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CommentBean entity, long rowId) {
        return entity.getNickname();
    }
    
    @Override
    public String getKey(CommentBean entity) {
        if(entity != null) {
            return entity.getNickname();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommentBean entity) {
        return entity.getNickname() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
